import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:provider/provider.dart';
import 'package:account/provider/drinkmenuProvider.dart';
import 'package:account/model/drinkmenuItem.dart';

class FormScreen extends StatefulWidget {
  const FormScreen({super.key});

  @override
  State<FormScreen> createState() => _FormScreenState();
}

class _FormScreenState extends State<FormScreen> {
  final _formKey = GlobalKey<FormState>();
  String _drinkName = '';
  double _price = 0.0;
  String _category = '‡∏Å‡∏≤‡πÅ‡∏ü'; // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  String? _imagePath;
  String _description = '';

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  Future<void> _pickImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);
    
    if (image == null) return;

    final Directory appDir = await getApplicationDocumentsDirectory();
    final String fileName = image.name;
    final String savedImagePath = '${appDir.path}/$fileName';

    await File(image.path).copy(savedImagePath); // ‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏õ

    setState(() {
      _imagePath = savedImagePath; // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°'),
        backgroundColor: Colors.brown,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // üñº ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              Center(
                child: GestureDetector(
                  onTap: _pickImage,
                  child: _imagePath != null
                      ? ClipRRect(
                          borderRadius: BorderRadius.circular(10),
                          child: Image.file(File(_imagePath!),
                              width: 150, height: 150, fit: BoxFit.cover),
                        )
                      : Container(
                          width: 150,
                          height: 150,
                          decoration: BoxDecoration(
                              color: Colors.brown[200],
                              borderRadius: BorderRadius.circular(10)),
                          child: const Icon(Icons.add_a_photo,
                              size: 50, color: Colors.white),
                        ),
                ),
              ),
              const SizedBox(height: 16),

              // üìå ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠
              TextFormField(
                decoration: const InputDecoration(labelText: '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°'),
                validator: (value) => value!.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠' : null,
                onSaved: (value) => _drinkName = value!,
              ),

              // üìå ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤
              TextFormField(
                decoration: const InputDecoration(labelText: '‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)'),
                keyboardType: TextInputType.number,
                validator: (value) => value!.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤' : null,
                onSaved: (value) => _price = double.parse(value!),
              ),

              // üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
              DropdownButtonFormField<String>(
                value: _category,
                decoration: const InputDecoration(labelText: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'),
                items: ['‡∏Å‡∏≤‡πÅ‡∏ü', '‡∏ä‡∏≤', '‡∏ô‡∏°', '‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ']
                    .map((cat) => DropdownMenuItem(value: cat, child: Text(cat)))
                    .toList(),
                onChanged: (value) => setState(() => _category = value!),
              ),

              // üìå ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
              TextFormField(
                decoration:
                    const InputDecoration(labelText: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°'),
                maxLines: 3,
                onSaved: (value) => _description = value ?? '',
              ),

              const SizedBox(height: 16),

              // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    Provider.of<DrinkMenuProvider>(context, listen: false)
                        .addDrink(
                      DrinkMenuItem(
                        keyID: DateTime.now().millisecondsSinceEpoch,
                        drinkName: _drinkName,
                        price: _price,
                        category: _category,
                        imageUrl: _imagePath,
                        description: _description,
                      ),
                    );
                    Navigator.pop(context);
                  }
                },
                style: ElevatedButton.styleFrom(backgroundColor: Colors.brown),
                child:
                    const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
